---
# Source: gitops-helm/templates/gitops-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: gitops-agent
  namespace: "simple-app"
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
---
# Source: gitops-helm/templates/upgrader/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitops-agent-upgrader
  namespace: "simple-app"
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent-upgrader
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent-upgrader
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
---
# Source: gitops-helm/templates/gitops-agent/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-agent-secret
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
  name: gitops-agent
  namespace: simple-app
type: Opaque
stringData:
  GITOPS_AGENT_TOKEN: |
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUURtT0k1K2wxTkoxckt1Cit2aU54dWNIdThuOGpGMHZycmk2Z1lJRHRkN2djRkZvc01xMzJuK3c3bDNhN1VHUXZSQjNROFpPQ0tybWtZczEKcnE3WGJLUXF6eVpNWGthTUF0elU4TmtjdDZpZVR0dTRITTVIaVE4V2xuWmQ5WXQ5U3lYRTlWc3B3Q0VvaThhdApNOVlsSDNDeGl3Z1E4SW1ubWdUYTUrWUZvUEhxd0s5ejVtazRhamhiTWpRbzdnZ2VUWmxQbmVUeHRJVUVXN3BGClNidXVjQ2QvRWh6MHJESTF6dlZveGxwd1I3WWJtYzVWdTRFS29PWGE2dmxraUZLN0U4QklmTUhtcmloSC9mM3oKZ05KbjBhb2IzMUVhMmtrSzBBaDNxQkRlZmdBTnk0VUFHUERSbjI4WG5OL2FkV2s3a2pnbm5xMlJzMjluSXI3dAoxU241dCtUaEFnTUJBQUVDZ2dFQWJwMmtFYjBoM3F1VEJUSS9OTmZwNzdSU0U4OVpndXlmZzdWd1E5b2g4WkxsCityaGZYc0ZVY3kzRTJNa0FwTXZDMnBzczhCZUlEZXJHaVkrYUlKWHB0MHY2NmR5dVp0MkZQNmRObWxmQVkvZ2QKNkRPbkJZWWNRczBlcUh5dmZnOGFZYTFHRlNSa2lqZkd5VGZMMytCZ1pGNGFEUkdXQW5xbGRJelIzOGg2RkVHQgpiOWxFQzdWekpKR0t3c1g2Y3M1d1BIRHJQQWNoNFhJSDlMWGp2VHpsZUFoQmJiQlZQZ0xwUVpoQWNvQXZzY1dGCktZKzUwZjI2a1FsUFFETkdaRnZhczc5bnhPbWFOY3RiLzVhQUw1OFFhaENsUVB0RWlhQjdsWmVtdUhrVjlPeWQKN0V3R0E4b2VCWGs0S0Z4cml6d2lDMlZqam5ha3dPaFkzODNiTmF6aEJRS0JnUUQ0cEQ1U0lwYVlhZmt4U0l1NQpSa2hIOUdMSjhnSWd6TTVGZlBaWisyeGNINlJnMHkvSEwyN2ZrNlliYlYrYWVHdXd0UzdyOEY0RkMyWlhBTEdzCm13THJiOUxjOHFLU3JIQjNZZHJpMm9HVno2TW82M2xCV2VPOE44d0FPV3NTc2dqY0M4MDVWVW1pTU1hWXhvYmcKa0hFUUVlbzUzL0cyQXBmcWg2Y3ZqUGhwdHdLQmdRRHRDTUU0WnNlSFg3RjhBaC81bG85emh1bEJ6WXA5dFJvbAp5NVpIUG1sblFTdno1dDgyVlMwc2xYTDFaK3cyUVRyMENNaFRUVllpR0ZKWld3dTliN3BXZHAzNjNtUjdwMjBHCk9VNHpWbVRSZEEzcmlpVHVINmpBNld2akhlYWorb1BSVStMOFh3YXNvMFNpaG9oL1NocEs4UEEwM2tnNitESUIKU0Z5Ujg4YUdKd0tCZ1FEQURUVXFBaGRxWUtpZlBaYlhKQWRldE5DOWhaWEpPZ2kxdWNFYlhjMmtGcmpFSlR1SgpVZ1VFNHFueUUzZzkrM2ZMQlJmYUhFNnkvTXd1dFpXSGFqQkdKSml1R3lnaHZOb2VERktpMlA0dzlqSGp3SVpuClNRUlQ5SkU1TnlDU1R6dnlvNWNBQ3ZXV05yQ2ZmdkRkY2hReXduTzJBbGxVS2dxbmwrSTJJMkFaWHdLQmdRRGkKcWpLTENzM1d5RTFpdG0xNU1ONndyTncxanFYV20rNExJbW5zYXVSRVZ1Lys1bEdoRlVhRGtjNUNta1FwaGFzbwpYWldqQXh0UXMwMWNJVkpTcnByVHY4NUdiWkJOSnNkODRpUER0K1BrMzBQSWIydnRRZDBQektiY29tVkJmWGU4CkhxbTZoK3hML2p6TjVqUjA5Sm03L0RiWGQ1QSt3OFNkc1dMRU53Y3FsUUtCZ0dWbGNtZTFTM05aOFpRVERHdmoKWVpYN2djWWlDcjR2TldJVS9UT1ZtazV1Mm12VFUxN0ZvY2JxU2tmaWUxeENxZlUwb3pOMWpDOG84b3k5RHoyYwp3VkpLN04wZ002TUlHZHVwRjV2NmV4bUZ5bVdhMm54S24vdXRoWDN5VEllY3dGb20rUmgwMDlMMUxuWVF1S1hzClZMZCtMRUpkWW5qOHBjQkwvT0NDdjNiWgotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: gitops-helm/templates/gitops-agent/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-agent-ssh
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
  name: gitops-agent-mtls
  namespace: simple-app
type: Opaque
data:
  client.crt: |
    
  client.key: |
---
# Source: gitops-helm/templates/gitops-agent/configmap.yaml
apiVersion: v1
data:
  GITOPS_ACCOUNT_IDENTIFIER: px7xd_BFRCi-pfWPYXVjvw
  GITOPS_AGENT_IDENTIFIER: argoagent
  GITOPS_ORG_IDENTIFIER: UX_Team
  GITOPS_PROJECT_IDENTIFIER: Shantelle_Project
  GITOPS_SERVICE_HTTP_TLS_ENABLED: "false"
  GITOPS_SERVICE_HTTP_CERT_FILES: /tmp/ca.bundle
  GITOPS_SERVICE_MTLS_ENABLED: "false"
  GITOPS_SERVICE_HTTP_CLIENT_CERT: /etc/mtls/client.crt
  GITOPS_SERVICE_HTTP_CLIENT_KEY: /etc/mtls/client.key
  AGENT_HTTP_TARGET: https://qa.harness.io/gitops
  GITOPS_SERVICE_PROTOCOL: HTTP1
  GITOPS_AGENT_ENABLE_RECONCILE: "true"
  GITOPS_AGENT_RECONCILE_INTERVAL: "100"
  GITOPS_AGENT_DISCOVER_APPLICATION_PODS_DURATION_IN_SECS: "120"
  LOG_LEVEL: debug
  GITOPS_AGENT_FETCH_TYPE: "POLLER"
  GITOPS_ARGOCD_REPO: argocd-repo-server
  GITOPS_ARGOCD_REDIS: argocd-redis
  GITOPS_ARGOCD_REDIS_HA: redis-ha
  GITOPS_ARGOCD_REDIS_HA_PROXY: redis-ha-haproxy
  GITOPS_ARGOCD_APP_CONTROLLER: argocd-application-controller
  GITOPS_ARGOCD_APPSET_CONTROLLER: argocd-applicationset-controller
  GITOPS_AGENT_AVAILABILITY_MODE: NON-HA
  ARGOCD_SERVER_REPO_SERVER: argocd-repo-server:8081
  REDIS_SERVER: argocd-redis:6379
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent-cm
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
  name: gitops-agent
  namespace: simple-app
---
# Source: gitops-helm/templates/upgrader/harness-upgrader-cm.yaml
apiVersion: v1
data:
  UPGRADER_GITOPS_ACCOUNT_IDENTIFIER: px7xd_BFRCi-pfWPYXVjvw
  UPGRADER_GITOPS_AGENT_IDENTIFIER: argoagent
  UPGRADER_GITOPS_ORG_IDENTIFIER: UX_Team
  UPGRADER_GITOPS_PROJECT_IDENTIFIER: Shantelle_Project
  UPGRADER_MODE: GitopsAgent
  UPGRADER_NAMESPACE: simple-app
  UPGRADER_WORKLOAD_NAME: gitops-agent
  UPGRADER_CONTAINER_NAME: gitops-agent
  UPGRADER_GITOPS_AGENT_HTTP_TARGET: https://qa.harness.io/prod1/gitops
  UPGRADER_GITOPS_USE_V2: "true"
  UPGRADER_GITOPS_ALL: "false"
kind: ConfigMap
metadata:
  name: gitops-agent-upgrader
  namespace: "simple-app"
---
# Source: gitops-helm/templates/gitops-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argoagent-agent
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
rules:
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - delete
      - get
      - patch
      - watch
      - list
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
    verbs:
      - get
  - apiGroups:
      - argoproj.io
    resources:
      - applications
      - applicationsets
      - appprojects
    verbs:
      - get
      - list
      - update
      - watch
      - create
      - patch
      - delete
  - apiGroups:
      - batch
    resources:
      
      - jobs
    verbs:
      - create
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      
      - create
---
# Source: gitops-helm/templates/gitops-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argoagent-agent
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argoagent-agent
subjects:
- kind: ServiceAccount
  name: gitops-agent
  namespace: simple-app
---
# Source: gitops-helm/templates/gitops-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitops-agent
  namespace: "simple-app"
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - external-secrets.io
  resources:
    - externalsecrets
  verbs:
    - get
    - list
    - watch
    - update
    - patch
    - delete
    - create
- apiGroups:
    - generators.external-secrets.io
  resources:
    - gcraccesstokens
    - ecrauthorizationtokens
  verbs:
    - get
    - list
    - watch
    - update
    - patch
    - delete
    - create
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - delete
  - patch
- apiGroups:
  - ""
  resources:
  - events
  - pods
  verbs:
  - create
  - list
  - watch
  - get
- apiGroups:
    - apps
  resources:
    - deployments
  verbs:
    - update
    - patch
---
# Source: gitops-helm/templates/upgrader/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitops-agent-upgrader
  namespace: "simple-app"
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent-upgrader
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent-upgrader
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
rules:
  - apiGroups:
    - batch
    - apps
    - extensions
    resources:
    - cronjobs
    verbs:
    - get
    - list
    - watch
    - update
    - patch
  - apiGroups:
    - extensions
    - apps
    resources:
    - deployments
    - statefulsets
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
---
# Source: gitops-helm/templates/gitops-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitops-agent
  namespace: "simple-app"
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitops-agent
subjects:
- kind: ServiceAccount
  name: gitops-agent
  namespace: simple-app
---
# Source: gitops-helm/templates/upgrader/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitops-agent-upgrader
  namespace: "simple-app"
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent-upgrader
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent-upgrader
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
roleRef:
  kind: Role
  name: gitops-agent-upgrader
  apiGroup: ""
subjects:
  - kind: ServiceAccount
    name: gitops-agent-upgrader
    namespace: "simple-app"
---
# Source: gitops-helm/templates/gitops-agent/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitops-agent
  namespace: "simple-app"
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
spec:
  replicas: 1
  revisionHistoryLimit: 
  selector:
    matchLabels:
      app.kubernetes.io/name: harness-gitops-agent
      app.kubernetes.io/instance: argocd
  template:
    metadata:
      annotations:
      labels:
        helm.sh/chart: gitops-helm-1.1.9
        app.kubernetes.io/name: harness-gitops-agent
        app.kubernetes.io/instance: argocd
        app.kubernetes.io/component: gitops-agent
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harness-gitops
        app.kubernetes.io/version: "v0.78.0"
    spec:
      terminationGracePeriodSeconds: 30
      serviceAccountName: gitops-agent
      containers:
      - command:
          - /app/agent
        name: gitops-agent
        image: harness/gitops-agent:v0.78.0
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: gitops-agent
          - secretRef:
              name: gitops-agent
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: REDIS_USERNAME
            valueFrom:
              secretKeyRef:
                name: argocd-redis
                key: redis-username
                optional: true
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: argocd-redis
                optional: true
                key: auth
          - name: REDIS_SENTINEL_USERNAME
            valueFrom:
              secretKeyRef:
                name: redis-sentinel-username
                key: redis-sentinel-username
                optional: true
          - name: REDIS_SENTINEL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: redis-sentinel-password
                key: redis-sentinel-password
                optional: true
        volumeMounts:
        - mountPath: /app/config/ssh
          name: ssh-known-hosts
        - mountPath: /app/config/tls
          name: tls-certs
        - mountPath: /app/config/server/tls
          name: argocd-repo-server-tls
        - mountPath: /home/argocd
          name: plugins-home
        - mountPath: /tmp
          name: tmp
        - mountPath: /etc/mtls
          name: mtls-certs
        - mountPath: /app/logs
          name: log-volume
        startupProbe:
          exec:
            command:
              - test
              - -s
              - logs/agent.log
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 32
        livenessProbe:
          httpGet:
            path: /healthz?full=true
            port: 8090
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8090
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: "1"
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: plugins-home
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: ssh-known-hosts
        configMap:
          name: argocd-ssh-known-hosts-cm
          defaultMode: 420
      - name: tls-certs
        configMap:
          name: argocd-tls-certs-cm
          defaultMode: 420
      - name: argocd-repo-server-tls
        secret:
          secretName: argocd-repo-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
      - name: mtls-certs
        secret:
          secretName: gitops-agent-mtls
          optional: true
          items:
          - key: client.crt
            path: client.crt
          - key: client.key
            path: client.key
      
      - name: log-volume
        emptyDir: { }
      dnsPolicy: ClusterFirst
---
# Source: gitops-helm/templates/upgrader/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: gitops-agent-upgrader
  namespace: "simple-app"
  labels:
    helm.sh/chart: gitops-helm-1.1.9
    app.kubernetes.io/name: harness-gitops-agent-upgrader
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/component: gitops-agent-upgrader
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harness-gitops
    app.kubernetes.io/version: "v0.78.0"
spec:
  schedule: "0 */4 * * *"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 20
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: gitops-agent-upgrader
          containers:
            - name: upgrader
              image: harness/upgrader:latest
              imagePullPolicy: Always
              envFrom:
                - configMapRef:
                    name: gitops-agent-upgrader
              env:
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: UPGRADER_TOKEN
                  valueFrom:
                    secretKeyRef:
                      key: GITOPS_AGENT_TOKEN
                      name: gitops-agent
              volumeMounts:
                - name: mtls-certs
                  mountPath: /etc/mtls
                - name: config-volume
                  mountPath: /etc/config
          volumes:
            - name: config-volume
              configMap:
                name: gitops-agent-upgrader
            - name: mtls-certs
              secret:
                secretName: gitops-agent-mtls
                optional: true
                items:
                  - key: client.crt
                    path: client.crt
                  - key: client.key
                    path: client.key
          restartPolicy: Never
